@model STEP_PORTAL.Models.tblTraining_Need

<head>
    <link rel="stylesheet" type="text/css" href="~/Content/css/CustomStyles.css">
</head>



<style>
    .card-body {
        padding: 8px;
        border-radius: 8px;
        height: 70px;
    }

    .card {
        width: fit-content;
        margin: auto;
        margin-top: 10px;
    }

    .card-container {
        display: flex;
        justify-content: center;
    }

    .btn {
        margin-bottom: 10px;
    }

    .btn {
        margin-bottom: 10px;
        margin-right: 10px;
    }
</style>

@if (!string.IsNullOrEmpty(TempData["SuccessMessage"] as string))
{
    <div class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}


<div class="dropdown-container">

    <label class="dropdown-label" for="taxPeriodDropdownMV"> Session:</label>
    <label class="form-control" for="taxPeriodDropdownMV"> @Session["TaxPeriod"]</label>


</div>

@*      new navigation buttons   *@
<div class="card" style=" background-color: transparent">
    <div id="menu_tab">

        <!-- Selected by default -->

        <input id="1" name="r" type="radio" />
        <label class="collapse" for="1"><a href="@Url.Action("DisplayKrasAndKpis", "Home")"> 1. Outcome Entry</a></label>
        <div></div>

        <input id="2" name="r" type="radio" />
        <label class="collapse" for="2"> <a href="@Url.Action("SpecialFactors", "Employee")"> 2. Special Factor</a></label>
        <div></div>

        <input id="3" name="r" type="radio" checked />
        <label class="collapse" for="1"><a href="@Url.Action("TrainingNeed", "Employee")"> 3. Training</a></label>
        <div></div>

        <input id="3" name="r" type="radio" />
        <label class="collapse" for="1"><a id="trainingNeedBtn" href="@Url.Action("DisplayALlData", "Employee")">4. Preview & Submit</a></label>
        <div></div>
    </div>
</div>

<br />

<form id="trainingNeedForm">
    <div class="form-horizontal">

        <h4>1.4 TRAINING NEED </h4>

        <hr />
        <br />
        <div id="validationSummary" class="text-danger"></div>

        <div class="form-group">
            <label for="" class="control-label col-md-2">Title</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                <span id="titleValidation" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group">
            <label for="" class="control-label col-md-2">By When</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.By_When, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                <span id="byWhenValidation" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-2" style="white-space: nowrap;">
                <label class="control-label">How to Train</label>
            </div>
            <div class="col-md-10">
                <div class="dropdown-container">
                    @Html.DropDownListFor(model => model.Train_Type, new List<SelectListItem>
                    {
                        new SelectListItem { Text = "On The Job", Value = "On The Job" },
                        new SelectListItem { Text = "Coaching", Value = "Coaching" },
                        new SelectListItem { Text = "Out Sourced", Value = "Out Sourced" }
                    }, "Select Training Type", new { @class = "form-control custom-select" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="" class="control-label col-md-2">Status</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                <span id="statusValidation" class="text-danger"></span>
            </div>
        </div>

        @if (@ViewBag.ApprovalSent)
        {
            <div class="alert alert-danger" role="alert">
                <button class="btn btn-primary submit-btn" type="submit" id="saveButton" hidden="hidden">Save</button>
                <i class="fas fa-info-circle"></i> Already Sent for Approval
            </div>
        }
        else
        {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <button type="button" id="saveButton" class="btn btn-primary submit-btn">Save</button>
                </div>
            </div>
        }

    </div>
</form>

<br />

<div id="userAddedInfo">
    <h3>Added Training Needs</h3>
    @if (Session["TrainingData"] != null)
    {
        var sessionTrainingData = Session["TrainingData"];
        List<STEP_PORTAL.Models.tblTraining_Need> trainingData = sessionTrainingData as List<STEP_PORTAL.Models.tblTraining_Need>;

        if (trainingData != null && trainingData.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Date</th>
                        <th>Train Type</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var training in trainingData)
                    {
                        <tr>
                            <td>@training.Title</td>
                            <td>@(training.By_When.HasValue ? training.By_When.Value.Date.ToString("dd-MM-yyyy") : "")</td>
                            <td>@training.Train_Type</td>
                            <td>@training.Status</td>
                            <td style="text-align: center; vertical-align: middle !important;">
                                @*  <button class="btn btn-danger delete-btn" data-title="@training.Title" data-by-when="@training.By_When.ToString()" data-type="@training.Train_Type" data-status="@training.Status">
                                        <i class="ti-trash"></i>
                                    </button>*@
                                @if (@ViewBag.ApprovalSent)
                                {
                                    <button class="btn btn-danger delete-btn" hidden="hidden" data-title="@training.Title" data-by-when="@training.By_When.ToString()" data-type="@training.Train_Type" data-status="@training.Status">
                                        <i class="ti-trash"></i>
                                    </button>
                                    <span class="alert-text text-danger">
                                        <i class="fas fa-exclamation-triangle"></i> Data cannot be deleted
                                    </span>
                                }
                                else
                                {
                                    <button class="btn btn-danger delete-btn" data-title="@training.Title" data-by-when="@training.By_When.ToString()" data-type="@training.Train_Type" data-status="@training.Status">
                                        <i class="ti-trash"></i>
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table> 
            }
        else
        {
            <p>No training data found</p>
        }
    }
    <br />
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }
</div>

<br />

@*<div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <a href="@Url.Action("DisplayAllData", "Employee")" class="btn btn-primary submit-btn">Review Submission</a>
        </div>
    </div>*@

@section scripts {
    <script>
        $(document).ready(function () {
            $('#saveButton').click(function () {
                submitForm();
            });

            $('.delete-btn').click(function () {
                var trainingData = {
                    title: $(this).data('title'),
                    by_when: $(this).data('by-when'),
                    type: $(this).data('type'),
                    status: $(this).data('status')
                };
                if (confirm("Are you sure you want to delete this?")) {
                    deleteTraining(trainingData);
                }
            });
        });

        function submitForm() {

            var title = $('#Title').val().trim();
            var byWhen = $('#By_When').val();
            var trainType = $('#Train_Type option:selected').val();

            if (title === '') {
                $('#titleValidation').html('Please enter a title');
                return;
            } else {
                $('#titleValidation').html('');
            }

            if (byWhen === '') {
                $('#byWhenValidation').html('Please enter a date');
                return;
            } else {
                $('#byWhenValidation').html('');
            }

            //if (trainType === '') {
            //    $('#trainTypeValidation').html('Please select a training type');
            //    return;
            //} else {
            //    $('#trainTypeValidation').html('');
            //}


            var formData = {
                Title: $('#Title').val(),
                By_When: $('#By_When').val(),
                Train_Type: $('#Train_Type').val(),
                Status: $('#Status').val()
            };

            $.ajax({
                type: 'POST',
                url: '@Url.Action("TrainingNeed", "Employee")',
                data: formData,
                success: function (data) {
                window.location.href = '@Url.Action("DisplayAllData", "Employee")';
                },
                error: function (xhr, status, error) {
                    var errorMessage = xhr.responseText || 'An error occurred while submitting the form.';
                    $('#validationSummary').html(errorMessage);
                    $('#titleValidation').html(xhr.responseJSON && xhr.responseJSON.modelStateErrors['Title'] || '');
                    $('#byWhenValidation').html(xhr.responseJSON && xhr.responseJSON.modelStateErrors['By_When'] || '');
                    $('#statusValidation').html(xhr.responseJSON && xhr.responseJSON.modelStateErrors['Status'] || '');
                }
            });
        }

function deleteTraining(trainingData) {
    $.ajax({
        type: 'POST',
        url: '@Url.Action("DeleteTraining", "Employee")',
        data: {
            title: trainingData.title || '',
            by_when: trainingData.by_when || '',
            type: trainingData.type || '',
            status: trainingData.status || ''
        },
        success: function (data) {
            window.location.reload();
        },
        error: function (xhr, status, error) {
            alert('An error occurred while deleting the training data.');
        }
    });
}
    </script>
}
